// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.24.0. DO NOT EDIT.

package health

import (
	management "github.com/elastic/beats/v7/libbeat/management"
	mock "github.com/stretchr/testify/mock"
)

// MockStatusReporter is an autogenerated mock type for the StatusReporter type
type MockStatusReporter struct {
	mock.Mock
}

type MockStatusReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatusReporter) EXPECT() *MockStatusReporter_Expecter {
	return &MockStatusReporter_Expecter{mock: &_m.Mock}
}

// UpdateStatus provides a mock function with given fields: status, msg
func (_m *MockStatusReporter) UpdateStatus(status management.Status, msg string) {
	_m.Called(status, msg)
}

// MockStatusReporter_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockStatusReporter_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - status management.Status
//   - msg string
func (_e *MockStatusReporter_Expecter) UpdateStatus(status interface{}, msg interface{}) *MockStatusReporter_UpdateStatus_Call {
	return &MockStatusReporter_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", status, msg)}
}

func (_c *MockStatusReporter_UpdateStatus_Call) Run(run func(status management.Status, msg string)) *MockStatusReporter_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(management.Status), args[1].(string))
	})
	return _c
}

func (_c *MockStatusReporter_UpdateStatus_Call) Return() *MockStatusReporter_UpdateStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStatusReporter_UpdateStatus_Call) RunAndReturn(run func(management.Status, string)) *MockStatusReporter_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStatusReporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStatusReporter creates a new instance of MockStatusReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStatusReporter(t mockConstructorTestingTNewMockStatusReporter) *MockStatusReporter {
	mock := &MockStatusReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
