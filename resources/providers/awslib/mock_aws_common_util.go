// Code generated by mockery v2.15.0. DO NOT EDIT.

package awslib

import (
	context "context"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	mock "github.com/stretchr/testify/mock"
)

// MockAWSCommonUtil is an autogenerated mock type for the AWSCommonUtil type
type MockAWSCommonUtil struct {
	mock.Mock
}

type MockAWSCommonUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSCommonUtil) EXPECT() *MockAWSCommonUtil_Expecter {
	return &MockAWSCommonUtil_Expecter{mock: &_m.Mock}
}

// DescribeRegions provides a mock function with given fields: ctx, params, optFns
func (_m *MockAWSCommonUtil) DescribeRegions(ctx context.Context, params *ec2.DescribeRegionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ec2.DescribeRegionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRegionsInput, ...func(*ec2.Options)) *ec2.DescribeRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRegionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeRegionsInput, ...func(*ec2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSCommonUtil_DescribeRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeRegions'
type MockAWSCommonUtil_DescribeRegions_Call struct {
	*mock.Call
}

// DescribeRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.DescribeRegionsInput
//   - optFns ...func(*ec2.Options)
func (_e *MockAWSCommonUtil_Expecter) DescribeRegions(ctx interface{}, params interface{}, optFns ...interface{}) *MockAWSCommonUtil_DescribeRegions_Call {
	return &MockAWSCommonUtil_DescribeRegions_Call{Call: _e.mock.On("DescribeRegions",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockAWSCommonUtil_DescribeRegions_Call) Run(run func(ctx context.Context, params *ec2.DescribeRegionsInput, optFns ...func(*ec2.Options))) *MockAWSCommonUtil_DescribeRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2.DescribeRegionsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockAWSCommonUtil_DescribeRegions_Call) Return(_a0 *ec2.DescribeRegionsOutput, _a1 error) *MockAWSCommonUtil_DescribeRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockAWSCommonUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAWSCommonUtil creates a new instance of MockAWSCommonUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAWSCommonUtil(t mockConstructorTestingTNewMockAWSCommonUtil) *MockAWSCommonUtil {
	mock := &MockAWSCommonUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
