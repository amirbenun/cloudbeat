name: Deploy CloudFormation

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - "[0-9]+.[0-9]+"
    types: [opened, synchronize, reopened]
    paths:
      - deploy/cloudformation/*.yml
      - .github/workflows/cloudformation-ci.yml

env:
  WORKING_DIR: deploy/test-environments
  FLEET_API_DIR: fleet_api/src
  DEPLOYMENT_NAME: DEPLOY_PR${{ github.event.number }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "eu-west-1"
  TF_VAR_ess_region: "gcp-us-west2"
  TF_VAR_stack_version: "8.10.0-SNAPSHOT"
  TF_VAR_ec_api_key: ${{ secrets.TF_VAR_ec_api_key }}
  S3_BASE_BUCKET: "s3://tf-state-bucket-test-infra"
  CNVM_STACK_NAME: cnvm-stack-pr${{ github.event.number }}

jobs:
  Deploy:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Init Hermit
        run: ./bin/hermit env -r >> $GITHUB_ENV
        working-directory: ./

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install Fleet API dependencies
        id: fleet-api-deps
        working-directory: ${{ env.WORKING_DIR }}/fleet_api
        run: |
          poetry install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set TF_STATE_FOLDER
        run: |
          echo "TF_STATE_FOLDER=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Provision Elastic Cloud Environment
        id: apply
        if: success()
        run: |
          terraform apply --auto-approve -var="deployment_name=${{ env.DEPLOYMENT_NAME }}" -target=module.ec_deployment

      - name: Set Environment Output
        id: env-output
        run: |
          echo "KIBANA_URL=$(terraform output -raw kibana_url)" >> $GITHUB_ENV
          echo "ES_URL=$(terraform output -raw elasticsearch_url)" >> $GITHUB_ENV
          echo "ES_USER=$(terraform output -raw elasticsearch_username)" >> $GITHUB_ENV

          export ES_PASSWORD=$(terraform output -raw elasticsearch_password)
          echo "::add-mask::$ES_PASSWORD"
          echo "ES_PASSWORD=$ES_PASSWORD" >> $GITHUB_ENV

      - name: Upload tf state
        if: always()
        env:
          S3_BUCKET: "${{ env.S3_BASE_BUCKET }}/${{ env.DEPLOYMENT_NAME }}_${{ env.TF_STATE_FOLDER }}"
        run: |
          aws s3 cp "./terraform.tfstate" "${{ env.S3_BUCKET }}/terraform.tfstate"

      - name: Summary
        if: success()
        run: |
          kibana_url=$(terraform output -raw kibana_url)
          summary="Kibana URL: $kibana_url"
          bucket_name="${{ env.S3_BASE_BUCKET }}"
          bucket_name="${bucket_name#s3://}"
          s3_bucket_link="[creds and keys](https://s3.console.aws.amazon.com/s3/buckets/$bucket_name)"
          summary=$(cat <<-EOF
          Kibana URL: [kibana]($kibana_url)
          Environment Details: $s3_bucket_link
          EOF
          )
          echo "$summary" >> $GITHUB_STEP_SUMMARY
          echo "$summary" # Print the summary to the workflow log

      - name: Install integrations
        working-directory: ${{ env.WORKING_DIR }}/fleet_api
        run: |
          poetry run python src/install_cnvm_integration.py
          poetry run python src/install_cspm_integration.py          

      - name: Deploy CNVM agent
        env:
          STACK_NAME: "${{ env.CNVM_STACK_NAME}}"
        run: |
          just deploy-cloudformation
      
      
      - name: Wait for CloudFormation stack
        id: wait-for-cfn
        run: |
          aws cloudformation wait stack-create-complete --stack-name ${{ env.CNVM_STACK_NAME }}


      - name: Wait for agents to enroll
        id: wait-for-agents
        working-directory: ${{ env.WORKING_DIR }}/fleet_api
        run: |
          poetry run python src/agents_enrolled.py

      - name: Cleanup Environment
        if: always()
        run: |
          terraform destroy --auto-approve
          aws cloudformation delete-stack --stack-name ${{ env.CNVM_STACK_NAME }}
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.CNVM_STACK_NAME }}
